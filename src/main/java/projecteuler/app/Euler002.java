/*
 * Each new term in the Fibonacci sequence is generated by adding the previous
 * two terms. By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not
 * exceed four million, find the sum of the even-valued terms.
 */

/*
 * fib[0] = 0; fib[1] = 1
 * fib[n] = fib[n-1] + fib[n-2]
 *
 * Every third Fibonacci number is even, so we only need to count the
 * sequence {fib[3n]}_n
 *
 * fib[3n+2] = fib[3n] + fib[3n+1]
 *           = fib[3n-1] + 2*fib[3n]
 * fib[3n+3] = fib[3n+2] + fib[3n+1]
 *           = fib[3n] + 2*fib[3n+1]
 *           = 2*fib[3n-1] + 3*fib[3n]
 *
 * |fib[3n+2]| = |1 2| |fib[3n-1]|
 * |fib[3n+3]| = |2 3| | fib[3n] |
 */

package projecteuler.app;

public final class Euler002 implements Euler {
    public static void main(String[] args) {
        System.out.println(new Euler002().run());
    }

    public String run() {
        // Start with fib[3]=2
        int sum = 2;
        int fib[] = {1,2}; // {fib[2], fib[3]}

        while (true) {
            int temp[] = {fib[0], fib[1]};
            fib[0] =   temp[0] + 2*temp[1];
            fib[1] = 2*temp[0] + 3*temp[1];

            if (fib[1] > 4000000) break;
            sum += fib[1];
        }

        return Integer.toString(sum);
    }
}
